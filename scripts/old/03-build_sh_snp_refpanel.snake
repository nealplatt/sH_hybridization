#-------------------------------------------------------------------------------
rule annotate_variants:
    input:
        VCF = R2_FILTER + "cohort_raw.vcf",
    output:
        ANNOTATED_VCF = REFPAN_DIR + "cohort_raw_variants.vcf",
    threads:
        1
    log:
        LOG_DIR + "annotate_variants"
    conda:
        "environment.yaml"
    shell:
        """
        bcftools annotate \
           --set-id +'%CHROM\:%POS' \
           {input.VCF} >{output.ANNOTATED_VCF}
        """

################################################################################
rule select_snps:
    input:
        VCF = REFPAN_DIR + "cohort_raw_variants.vcf",
    output:
        VCF = temp(REFPAN_DIR + "cohort_raw_snps.vcf")
    threads:
        1
    log:
        LOG_DIR + "select_snps"
    conda:
        "environment.yaml"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --remove-indels \
            --recode \
            --recode-INFO-all \
            --stdout >{output.VCF}
        """

rule select_indels:
    input:
        VCF = REFPAN_DIR + "cohort_raw_variants.vcf",
    output:
        VCF = temp(REFPAN_DIR + "cohort_raw_indels.vcf")
    threads:
        1
    log:
        LOG_DIR + "select_indels"
    conda:
        "environment.yaml"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --keep-only-indels \
            --recode \
            --recode-INFO-all \
            --stdout >{output.VCF}
        """


################################################################################
rule soft_filter_mito_snps:
    input:
        VCF = REFPAN_DIR + "cohort_raw_snps.vcf",
        REFERENCE = GENOME
    output:
        temp(REFPAN_DIR + "mito_snp.vcf.idx"),
        MITO_SNPS = temp(REFPAN_DIR + "mito_snp.vcf"),
        MITO_SOFT_SNPS = temp(REFPAN_DIR + "mito_soft_snp.vcf"),
        MITO_SOFT_SNPS_IDX = temp(REFPAN_DIR + "mito_soft_snp.vcf.idx")
    threads:
        1
    log:
        LOG_DIR + "soft_filter_mito_snps"
    conda:
        "environment.yaml"
    params:
        MITO_CONTIG = "AMPZ01026399.1"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --chr {params.MITO_CONTIG} \
            --recode \
            --recode-INFO-all \
            --stdout >{output.MITO_SNPS}

        singularity exec snpCalling_v0.0.8.img \
            gatk IndexFeatureFile \
                -F {output.MITO_SNPS}

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
                -R {input.REFERENCE} \
                -V {output.MITO_SNPS} \
                --filter-name "snp_QD_lt_5" \
                --filter-expression "QD < 5.0" \
                --filter-name "snp_FS_gt_55" \
                --filter-expression "FS > 55.0" \
                --filter-name "snp_MQ_lt_30" \
                --filter-expression "MQ < 30.0 || MQ = \"nan\"" \
                --filter-name "snp_MQRankSum_lt_-12.5" \
                --filter-expression "MQRankSum < -12.5" \
                --filter-name "snp_ReadPosRankSum_lt_-8" \
                --filter-expression "ReadPosRankSum < -8.0" \
                --filter-name "snp_SQR_gt_3" \
                --filter-expression "SOR > 3.0"  \
                -O {output.MITO_SOFT_SNPS}
        """

rule soft_filter_mito_indels:
    input:
        VCF = REFPAN_DIR + "cohort_raw_indels.vcf",
        REFERENCE = GENOME
    output:
        temp(REFPAN_DIR + "mito_indel.vcf.idx"),
        MITO_INDELS = temp(REFPAN_DIR + "mito_indel.vcf"),
        MITO_SOFT_INDELS = temp(REFPAN_DIR + "mito_soft_indel.vcf"),
        MITO_SOFT_INDELS_IDX = temp(GREFPAN_DIRENO_DIR + "mito_soft_indel.vcf.idx"),
    threads:
        1
    log:
        LOG_DIR + "soft_filter_mito_indels"
    conda:
        "environment.yaml"
    params:
        MITO_CONTIG = "AMPZ01026399.1"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --chr {params.MITO_CONTIG} \
            --recode \
            --recode-INFO-all \
            --stdout >{output.MITO_INDELS}

        singularity exec snpCalling_v0.0.8.img \
            gatk IndexFeatureFile \
                -F {output.MITO_INDELS}

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
                -R {input.REFERENCE} \
                -V {output.MITO_INDELS} \
                --filter-name "indel_QD_lt_5" \
                --filter-expression "QD < 5.0" \
                --filter-name "snp_FS_gt_55" \
                --filter-expression "FS > 55.0" \
                --filter-name "snp_ReadPosRankSum_lt_-20" \
                --filter-expression "ReadPosRankSum < -20.0" \
                --filter-name "snp_SQR_gt_10" \
                --filter-expression "SOR > 10.0" \
                -O {output.MITO_SOFT_INDELS}
        """

rule soft_filter_nuclear_snps:
    input:
        REFERENCE = GENOME,
        VCF = REFPAN_DIR + "cohort_raw_snps.vcf"
    output:
        temp(REFPAN_DIR + "nuc_snp.vcf.idx"),
        NUC_SNPS = temp(REFPAN_DIR + "nuc_snp.vcf"),
        NUC_SOFT_SNPS = temp(REFPAN_DIR + "nuc_soft_snp.vcf"),
        NUC_SOFT_SNPS_IDX = temp(REFPAN_DIR + "nuc_soft_snp.vcf.idx")
    threads:
        1
    log:
        LOG_DIR + "soft_filter_nuclear_snps"
    params:
        MITO_CONTIG="AMPZ01026399.1"
    conda:
        "environment.yaml"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --not-chr {params.MITO_CONTIG} \
            --recode-INFO-all \
            --recode \
            --stdout >{output.NUC_SNPS}

        singularity exec snpCalling_v0.0.8.img \
            gatk IndexFeatureFile \
                -F {output.NUC_SNPS}

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
                -R {input.REFERENCE} \
                -V {output.NUC_SNPS} \
                --filter-name "snp_QD_lt_5" \
                --filter-expression "QD < 5.0" \
                --filter-name "snp_FS_gt_55" \
                --filter-expression "FS > 55.0" \
                --filter-name "snp_MQ_lt_30" \
                --filter-expression "MQ < 30.0 || MQ = \"nan\"" \
                --filter-name "snp_MQRankSum_lt_-12.5" \
                --filter-expression "MQRankSum < -12.5" \
                --filter-name "snp_ReadPosRankSum_lt_-8" \
                --filter-expression "ReadPosRankSum < -8.0" \
                --filter-name "snp_SQR_gt_3" \
                --filter-expression "SOR > 3.0"  \
                -O {output.NUC_SOFT_SNPS} 
        """

rule soft_filter_nuclear_indels:
    input:
        REFERENCE = GENOME,
        VCF = REFPAN_DIR + "cohort_raw_indels.vcf"
    output:
        temp(REFPAN_DIR + "nuc_indel.vcf.idx"),
        NUC_INDELS = temp(REFPAN_DIR + "nuc_indel.vcf"),
        NUC_SOFT_INDELS = temp(REFPAN_DIR + "nuc_soft_indel.vcf"),
        NUC_SOFT_INDELS_IDX = temp(REFPAN_DIR + "nuc_soft_indel.vcf.idx")
    threads:
        1
    log:
        LOG_DIR + "select_autosome_variants"
    params:
        MITO_CONTIG = "AMPZ01026399.1"
    conda:
        "environment.yaml"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --not-chr {params.MITO_CONTIG} \
            --recode-INFO-all \
            --recode \
            --stdout >{output.NUC_INDELS}

        singularity exec snpCalling_v0.0.8.img \
            gatk IndexFeatureFile \
                -F {output.NUC_INDELS}
 
        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
                -R {input.REFERENCE} \
                -V {output.NUC_INDELS} \
                --filter-name "indel_QD_lt_5" \
                --filter-expression "QD < 5.0" \
                --filter-name "snp_FS_gt_55" \
                --filter-expression "FS > 55.0" \
                --filter-name "snp_ReadPosRankSum_lt_-20" \
                --filter-expression "ReadPosRankSum < -20.0" \
                --filter-name "snp_SQR_gt_10" \
                --filter-expression "SOR > 10.0" \
                -O {output.NUC_SOFT_INDELS} 
        """

rule filter_variants:
    input:
        SOFT_SNPS = REFPAN_DIR + "{type}_soft_snp.vcf",
        SOFT_INDELS = REFPAN_DIR + "{type}_soft_indel.vcf",
        REFERENCE = GENOME
    output:
        SOFT_VCF = temp(REFPAN_DIR + "{type}_soft_variants.vcf"),
        SOFT_VCF_IDX = temp(REFPAN_DIR + "{type}_soft_variants.vcf.idx"),
        VARIANT_LIST = temp(GEREFPAN_DIRNO_DIR + "{type}_variants.list"),
        HARD_VCF = temp(REFPAN_DIR + "{type}_hard_variants.vcf"),
        MISSING_LIST = temp(REFPAN_DIR + "{type}-data_poor_indivs.list"),
        TABLE = REFPAN_DIR + "{type}-table.imiss",
        INDIV_VCF = temp(REFPAN_DIR + "{type}-hq_indivs.vcf"),
        FINAL_VCF = protected(REFPAN_DIR + "sH_filtered_{type}-variants.vcf")
    threads:
        1
    log:
        LOG_DIR + "merge_and_filter_{type}_variants"
    conda:
        "environment.yaml"
    shell:
        """
        ls {input.SOFT_SNPS} {input.SOFT_INDELS} >{output.VARIANT_LIST}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk MergeVcfs \
                -I {output.VARIANT_LIST} \
                -O {output.SOFT_VCF} \
                -R {input.REFERENCE}

        #inital_hard_filt
        vcftools \
            --remove-filtered-all \
            --max-missing 0.51 \
            --mac 2 \
            --vcf {output.SOFT_VCF} \
            --recode \
            --stdout >{output.HARD_VCF}

        #count-missing per inidv
        vcftools \
            --vcf {output.HARD_VCF} \
            --missing-indv \
            --stdout >{output.TABLE}

        #remove individuals missing more than 51% of the data    
        cat {output.TABLE} | awk '$5 >0.49 {{print $1}}' >{output.MISSING_LIST}

        #remove low perc indivs
        vcftools \
            --vcf {output.HARD_VCF} \
            --remove {output.MISSING_LIST} \
            --recode \
            --recode-INFO-all \
            --stdout >{output.INDIV_VCF}

        #inital_hard_filt
        vcftools \
            --remove-filtered-all \
            --max-missing 0.75 \
            --maf 0.05 \
            --vcf {output.INDIV_VCF} \
            --recode \
            --stdout >{output.FINAL_VCF}
        """

#build snp panel (chr:locus) for outgroup snp calling
rule build_snp_panel:
    input:
        MITO_VCF  = REFPAN_DIR + "sH_filtered_mito-variants.vcf",
        NUC_VCF = REFPAN_DIR + "sH_filtered_nuc-variants.vcf"
    output:
        REFPAN_DIR + "sH_ref_panel_snps.list"
    threads:
        1
    log:
        LOG_DIR + "build_snp_panel"
    conda:
        "environment.yaml"
    shell:
        """
        grep -v "#" {input.MITO_VCF} {input.NUC_VCF} | awk '{{print $3}}' >{output}  
        """

