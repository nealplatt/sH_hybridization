# snakemake -p --use-singularity --use-conda --cluster 'qsub -V -cwd -j y -S /bin/bash -pe mpi {threads} -o {log}' --jobs 120 --latency-wait 200
# File:     Snakefile
# Name:     Neal Platt
# Date:     26 March 2018
# Desc:     This Snake file is used to filter, map, and call SNPs on exome data from
#           Schistosoma Haemotobium made available through the Anderson lab at Texas
#           Biomedical Research Institute.  
# Usage:    snakemake -p --use-conda --cluster 'qsub -V -cwd -j y -S /bin/bash -pe mpi {threads} -o {log}' --jobs 10 --latency-wait 200
# Reqs:     BWA
#           Trimmomatic
#           SAMtools
#           GATK
# Comments: 
#
#       VERY IMPORTANT NOTE:
#       Sometimes the cluster has a difficult time with latency issues
#       make sure that snakemake is run with the following option:
#
#                     --latency-wait 120
#       
#       a latency time greater than 120 is OK when in doubt
#
#-------------------------------------------------------------------------------
# To Do:
#   4] fix messages - seem to crash when running 
#   6] whatup with all the snakejob* files
#   7] download genome and raw data from ncbi
#   8] sub-workflows for major stages
#  10] Param errors on samse/pe_sort
#-------------------------------------------------------------------------------

#setting up snakemake 
configfile: "config.yaml"
HOME_DIR = "/master/nplatt/schisto_hybridization/"
CONTIG_CHUNKS=50
ASSEMBLY = "schHae_v1.fa"

#setting work directory
RESULTS_DIR = HOME_DIR + "results/"
DATA_DIR = HOME_DIR + "data/"
LOG_DIR = RESULTS_DIR + "logs/"
GENOME_DIR = DATA_DIR + "genome/"
GENOME = GENOME_DIR + ASSEMBLY
SEQ_DIR = DATA_DIR + "sequence_data/"
FILTER_READS_DIR = RESULTS_DIR + "01-filtered_reads/"
MAP_DIR = RESULTS_DIR + "02-mapped_reads/" 
BQSR_DIR = RESULTS_DIR + "03-gatk_bqsr/" 
BQSR_R1_DIR = BQSR_DIR + "r1/"
BQSR_R2_DIR = BQSR_DIR + "r2/"
WGA_DIR = RESULTS_DIR + "06-wga/" 

#setting work directory
workdir: HOME_DIR

#setting up local rules to be run on the head node
localrules: all
localrules: create_list_of_contigs
localrules: bqsr_r1_prep_gdbimport
localrules: bqsr_r2_prep_gdbimport

#list of all the sample IDs to be processed - in config file
EXOME_SAMPLES = config["haematobium_samples"] + config["mansoni_samples"]
SRA_SAMPLES = config["haematobium_SRA_samples"] + config["currasoni_samples"] + config["bovis_samples"]
SAMPLES = EXOME_SAMPLES + SRA_SAMPLES

#prep array to split genome
NUMBERS=list(range(1, CONTIG_CHUNKS))
NUMS_2D=[]
for NUM in NUMBERS:
    NUMS_2D.append("%02d" % NUM)

#get genomes - sman_v7 ftp://ftp.sanger.ac.uk/pub/project/pathogens/Schistosoma/mansoni/v7/sequence/Smansoni_v7.fa.gz
shell.prefix("source ~/.bash_profile; ")

#-------------------------------------------------------------------------------
# clean all of the snake files created from previous run
onstart:
    shell("rm snakejob.*")

#-------------------------------------------------------------------------------
# initializing rule - these files need to be generated...initiates the pipeline
rule all:
    input: 
        expand("{dir}all_recalibration_plot_r2.pdf", dir=BQSR_DIR), 
        WGA_DIR + "schMan7_vs_schMan1.hal"

#-------------------------------------------------------------------------------
# Filter reads
#
rule filter_reads:
    input:
        R1 = SEQ_DIR + "{sample}_R1.fastq.gz",
        R2 = SEQ_DIR + "{sample}_R2.fastq.gz"
    output:
        R1_PE = FILTER_READS_DIR + "{sample}_filtered_paired_R1.fastq.gz",
        R1_SE = temp(FILTER_READS_DIR + "{sample}_filtered_unpaired_R1.fastq.gz"),
        R2_PE = FILTER_READS_DIR + "{sample}_filtered_paired_R2.fastq.gz",
        R2_SE = temp(FILTER_READS_DIR + "{sample}_filtered_unpaired_R2.fastq.gz"),
        RX = FILTER_READS_DIR + "{sample}_filtered_unpaired_RX.fastq.gz"
    threads:
        12
    conda:
        "environment.yaml"
    log:
        LOG_DIR + "{sample}.filter_reads.log"    
    shell:
        """
        trimmomatic \
            PE \
            -threads {threads} \
            -phred33 \
            {input.R1} \
            {input.R2} \
            {output.R1_PE} \
            {output.R1_SE} \
            {output.R2_PE} \
            {output.R2_SE} \
            LEADING:10 \
            TRAILING:10 \
            SLIDINGWINDOW:4:15 \
            MINLEN:36

        zcat {output.R1_SE} {output.R2_SE} | gzip >{output.RX} 
        """

#-------------------------------------------------------------------------------
# MAPPING FILTERED READS TO THE GENOME
#
rule index_genome:
    input:
        GENOME_DIR + "GCA_000699445.1_SchHae_1.0_genomic.fna"
    output:
        expand(GENOME_DIR + "schHae_v1.fa{ext}", ext=["", ".pac", ".ann", ".amb", ".bwt", ".sa"])
    conda:
        "environment.yaml"
    log:
        LOG_DIR + "index_genome.log"
    params:
        SOFT_LINK = GENOME
    shell:
        """
        ln -s {input} {params.SOFT_LINK}
                
        bwa index {params.SOFT_LINK}
        """

rule bwa_map_R1:
    input:
        rules.index_genome.output,
        PE_R1 = rules.filter_reads.output.R1_PE,
        REFERENCE = GENOME
    output:
        temp(MAP_DIR + "{sample}_R1.sai")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.bwa_map_R1.log"
    shell:
        """
        bwa aln -t {threads} -f {output} {input.REFERENCE} {input.PE_R1}
        """

rule bwa_map_R2:
    input:
        rules.index_genome.output,
        PE_R2 = rules.filter_reads.output.R2_PE,
        REFERENCE = GENOME
    output:
        temp(MAP_DIR + "{sample}_R2.sai")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.bwa_map_R2.log"
    shell:
        """
        bwa aln -t {threads} -f {output} {input.REFERENCE} {input.PE_R2}
	    """

rule bwa_map_RX:
    input:
        rules.index_genome.output,
        SE_RX = rules.filter_reads.output.RX,
        REFERENCE = GENOME
    output:
        temp(MAP_DIR + "{sample}_RX.sai")
    conda:
        "environment.yaml"
    threads:
        12
    log:
         LOG_DIR + "{sample}.bwa_map_RX.log"
    shell:
        """
        bwa aln -t {threads} -f {output} {input.REFERENCE} {input.SE_RX}
        """

rule bwa_sampe:
    input:
        REFERENCE = GENOME,
        SAI_R1 = rules.bwa_map_R1.output,
        SAI_R2 = rules.bwa_map_R2.output,
        PE_R1 = rules.filter_reads.output.R1_PE,
        PE_R2 = rules.filter_reads.output.R2_PE,
    output:
        temp(MAP_DIR + "{sample}_samPE.bam")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.bwa_sampe.log"
    shell:
        """
        bwa sampe {input} | samtools view -Sb -F 4 - >{output}       
        """

rule bwa_samse:
    input:
        REFERENCE = GENOME,
        SAI_RX = rules.bwa_map_RX.output,
        SE_RX = rules.filter_reads.output.RX
    output:
        temp(MAP_DIR + "{sample}_samSE.bam")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.bwa_samse.log"
    shell:
        """
        bwa samse {input} | samtools view -Sb -F 4 - >{output}       
        """

rule sort_sampe:
    input:
        rules.bwa_sampe.output
    output:
        temp(MAP_DIR + "{sample}_samPE_sorted.bam")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.sort_sampe.log"
    shell:
        """
        samtools sort -o {output} {input} 
        """

rule sort_samse:
    input:
        rules.bwa_samse.output
    output:
        temp(MAP_DIR + "{sample}_samSE_sorted.bam")
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.sort_samse.log"
    shell:
        """
        samtools sort -o {output} {input} 
        """

rule process_bam:
    input:
        rules.sort_sampe.output,
        rules.sort_samse.output
    output:
        MERGED = temp(MAP_DIR + "{sample}_merged.bam"),
        RGS = temp(MAP_DIR + "{sample}_merged_RGs.bam"),
        RG_SORTED = temp(MAP_DIR + "{sample}_merged_RGs_sorted.bam"),
        BAM = protected(MAP_DIR + "{sample}_processed.bam"),
        METRICS = MAP_DIR + "{sample}_noDupes.metrics",
        INDEX = MAP_DIR + "{sample}_processed.bam.bai"
    conda:
        "environment.yaml"
    threads:
        12
    log:
        LOG_DIR + "{sample}.process_bam.log"
    params:
        CELL = lambda wildcards: config['rg_cell'][wildcards.sample],
        LANE = lambda wildcards: config['rg_lane'][wildcards.sample],
        INDEX = lambda wildcards: config['rg_index'][wildcards.sample]
    shell:
        """
        samtools merge {output.MERGED} {input}

        singularity exec snpCalling_v0.0.8.img \
            gatk AddOrReplaceReadGroups \
                --INPUT={output.MERGED} \
                --OUTPUT={output.RGS} \
                --RGID={params.CELL}.{params.LANE} \
                --RGLB=library1 \
                --RGPL=illumina \
                --RGPU={params.CELL}.{params.INDEX}.{params.LANE} \
                --RGSM={wildcards.sample}

        singularity exec snpCalling_v0.0.8.img \
            gatk SortSam \
                --INPUT {output.RGS} \
                --OUTPUT {output.RG_SORTED} \
                --SORT_ORDER=coordinate

        singularity exec snpCalling_v0.0.8.img \
            gatk MarkDuplicates \
                --INPUT {output.RG_SORTED} \
                --OUTPUT {output.BAM} \
                --METRICS_FILE {output.METRICS} \
                --MAX_FILE_HANDLES_FOR_READ_ENDS_MAP 900

        samtools index {output.BAM}
        """

#-------------------------------------------------------------------------------
# GATK INDEXING
rule seqdict_genome:
    input: 
        GENOME
    output:
        GENOME_DIR + "schHae_v1.dict"
    threads:
        1
    log:
        LOG_DIR + "seqdict_genome.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk CreateSequenceDictionary -R {input}
        """

rule faidx_genome:
    input: 
        GENOME
    output:
        GENOME_DIR + "schHae_v1.fa.fai"
    conda:
        "environment.yaml"
    threads:
        1
    log:
        LOG_DIR + "faidx_genome.log"
    shell:
        """
        samtools faidx {input}
        """

# Create list of contigs for Sh.  this will be used frequently for gatk
rule create_list_of_contigs:
    input: 
        GENOME_DIR + "schHae_v1.fa"
    output:
        CONTIG_LIST = (expand("{dir}contigs.{number}.list", dir=BQSR_DIR, number=NUMS_2D)),
        GENOME_LIST = BQSR_DIR + "schHae_v1_contigs.list"
    threads:
        1
    log:
        LOG_DIR + "create_list_of_contigs.log"
    params:
        PREFIX = BQSR_DIR + "contigs."
    shell:
        """
        grep ">" {input} | cut -f1 -d" " | sed 's/>//' | shuf >{output.GENOME_LIST}
        singularity exec snpCalling_v0.0.8.img \
            split -n l/{CONTIG_CHUNKS} \
                --numeric-suffixes=1 \
                --additional-suffix .list \
                {output.GENOME_LIST} \
                {params.PREFIX}
        """

#-------------------------------------------------------------------------------
# initial SNPs with haplotype caller
rule bqsr_r1_haplotype_caller:
    input: 
        rules.seqdict_genome.output,
        MAP_DIR + "{sample}_processed.bam.bai",
        BAM = MAP_DIR + "{sample}_processed.bam",
        REFERENCE = GENOME,
        LIST = BQSR_DIR + "contigs.{chunk}.list"
    output:
        temp(BQSR_R1_DIR + "{sample}_n{chunk}.g.vcf")
    threads:
        1
    log:
        LOG_DIR + "{sample}_{chunk}.bqsr_r1_haplotype_caller.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk HaplotypeCaller \
                -I {input.BAM} \
                -O {output} \
                -R {input.REFERENCE} \
                -L {input.LIST} \
                -ERC GVCF
        """

rule bqsr_r1_build_indiv_vcfs:
    input: 
        expand(BQSR_R1_DIR + "{{sample}}_n{number}.g.vcf", number=NUMS_2D) 
    output:
        temp(BQSR_R1_DIR + "{sample}.sorted.g.vcf")
    threads:
       1
    log:
        LOG_DIR + "{sample}.bqsr_r1_build_indiv_vcfs.log"
    shell:
        """
        ls {input} >results/03-gatk_bqsr/r1/{wildcards.sample}.list
    
        singularity exec snpCalling_v0.0.8.img \
           gatk MergeVcfs \
                -I results/03-gatk_bqsr/{wildcards.sample}.list \
                -O results/03-gatk_bqsr/tmp_{wildcards.sample}.merged.g.vcf
        
        singularity exec snpCalling_v0.0.8.img \
            gatk SortVcf \
                -I results/03-gatk_bqsr/tmp_{wildcards.sample}.merged.g.vcf \
                -O {output}

        """
#-------------------------------------------------------------------------------

rule bqsr_r1_prep_gdbimport:
    input:
        expand(BQSR_R1_DIR + "{sample}.sorted.g.vcf", sample=SAMPLES)
    output:
        temp(BQSR_R1_DIR + "bqsr_r1_hc_samples.list")
    threads:
        1
    log:
       LOG_DIR + "bqsr_r1_prep_gdbimport.log"
    shell:
        """
        ls {input} >{output}
        mkdir results/03-gatk_bqsr/r1/db
        """

rule bqsr_r1_gdbimport:
    input:
        BQSR_R1_DIR + "bqsr_r1_hc_samples.list",
    output:
        temp(BQSR_R1_DIR + "db/{contig}")
    threads:
        12
    log:
        LOG_DIR + "{wildcards.CONTIG}.bqsr_r1_gdbimport.log"
    #params:
    #    CONTIG=config["contigs"]
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk --java-options \"-Xmx4g -Xms4g\" GenomicsDBImport \
                -V {input} \
                --genomicsdb-workspace-path {output} \
                -L {wildcards.contig} \
                --reader-threads {threads} \
                --batch-size 24"
        """
  
rule bqsr_r1_genotype:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        DB = BQSR_R1_DIR + "db/{contig}"     
    output:
        temp(BQSR_R1_DIR + "geno/{contig}.vcf")
    threads:
        1
    log:
        LOG_DIR + "{wildcards.contig}.bqsr_r1_genotype.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk GenotypeGVCFs \
                -R {input.REFERENCE} \
                -V gendb://{input.DB} \
                -new-qual \
                -O {output}
        """

rule bqsr_r1_build_cohort_vcf:
    input:
        VCF = expand(BQSR_R1_DIR + "geno/{contig}.vcf", contig=config['contigs']),
    output:
        temp(BQSR_R1_DIR + "cohort.vcf")
    threads:
        12
    log:
        LOG_DIR + "bqsr_r1_build_cohort_vcf.log"
    params: 
        LIST = temp(BQSR_R1_DIR + "geno/contig.list"),
        TMP_VCF = temp(BQSR_R1_DIR + "all.merged.g.vcf")
    shell:
        """        
        ls {input} >{params.LIST}
    
        singularity exec snpCalling_v0.0.8.img \
           gatk MergeVcfs \
                -I {params.LIST} \
                -O {params.TMP_VCF}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk SortVcf \
                -I {params.TMP_VCF} \
                -O {output}
        """
      
# SELECT and FILTER SNPS ------------------------------------------------------------------
rule bqsr_r1_filter_snps:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        VCF = BQSR_R1_DIR + "cohort.vcf"
    output:
        temp(BQSR_R1_DIR + "cohort_filtered_SNPs.vcf")
    threads:
        1
    log:
        LOG_DIR + "bqsr_r1_filter_snps.log"
    params:
        TMP_VCF = temp(BQSR_R1_DIR + "cohort_SNPs.vcf")
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
            -V {input.VCF} \
            -select-type SNP \
            -O {params.TMP_VCF} \
            -R {input.REFERENCE}"

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
            -R {input.REFERENCE} \
            -V {params.TMP_VCF} \
            --filter-expression "'"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"'" \
            --filter-name "'"recommended_snp_filter"'" \
            -O {output}"

        """



# SELECT and FILTER INDELS -----------------------------------------------------
rule bqsr_r1_filter_indels:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        VCF = BQSR_R1_DIR + "cohort.vcf"
    output:
        temp(BQSR_R1_DIR + "cohort_filtered_INDELs.vcf")
    threads:
        1
    log:
        LOG_DIR + "bqsr_r1_filter_indels.log"
    params:
        TMP_VCF = temp(BQSR_R1_DIR + "cohort_INDELs.vcf")
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
            -V {input.VCF} \
            -select-type INDEL \
            -O {params.TMP_VCF} \
            -R {input.REFERENCE}"

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
            -R {input.REFERENCE} \
            -V {params.TMP_VCF} \
            --filter-expression "'"QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0"'" \
            --filter-name "'"recommended_indel_filter"'" \
            -O {output}
        """

rule bqsr_r1_merge_variants:
    input:
        INDELS = BQSR_R1_DIR + "cohort_filtered_INDELs.vcf",
        SNPS = BQSR_R1_DIR + "cohort_filtered_SNPs.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa"
    output:
        protected(BQSR_DIR + "cohort_filtered_variants_r1.vcf")
    threads:
        12
    log:
        LOG_DIR + "bqsr_r1_merge_variants.log"
    params:
        LIST=temp(BQSR_R1_DIR + "variant.list")
    shell:
        """
        ls {input.SNPS} {input.INDELS} >{params.LIST}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk MergeVcfs \
            -I {params.LIST} \
            -O {output} \
            -R {input.REFERENCE}
        """
    

#-------------------------------------------------------------------------------
rule bqsr_r1_score_pre_recal:
    input:
        BAM = MAP_DIR + "{sample}_processed.bam",
        VCF = BQSR_DIR + "cohort_filtered_variants_r1.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa"        
    output:
        BQSR_R1_DIR + "{sample}_PRErecal_r1.table"
    threads:
        1
    log:
        LOG_DIR + "{sample}bqsr_r1_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --known-sites {input.VCF} \
            -O {output}
        """

rule bqsr_r1_recalibrate_bams:
    input:
        BAM = MAP_DIR + "{sample}_processed.bam",
        VCF = BQSR_DIR + "cohort_filtered_variants_r1.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        PRE_TABLE = BQSR_R1_DIR + "{sample}_PRErecal_r1.table"       
    output:
        BQSR_R1_DIR + "{sample}_recal_r1.bam"
    threads:
        1
    log:
        LOG_DIR + "{sample}bqsr_r1_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --bqsr-recal-file {input.VCF} \
            -O {output}
        """

rule bqsr_r1_score_post_recal:
    input:
        BAM  = BQSR_R1_DIR + "{sample}_recal_r1.bam",
        VCF = BQSR_DIR + "cohort_filtered_variants_r1.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa"        
    output:
        BQSR_R1_DIR + "{sample}_POSTrecal_r1.table"
    threads:
        1
    log:
        LOG_DIR + "{sample}.bqsr_r1_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --known-sites {input.VCF} \
            -O {output}
        """

rule bqsr_r1_analyze_covariates_by_sample:
    input:
        PRE_TABLE = BQSR_R1_DIR + "{sample}_PRErecal_r1.table",
        POST_TABLE = BQSR_R1_DIR + "{sample}_POSTrecal_r1.table"
    output:
        BQSR_R1_DIR + "{sample}_recalibration_plot_r1.pdf"
    threads:
        1
    log:
        LOG_DIR + "bqsr_r1_build_cohort_vcf.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk AnalyzeCovariates \
            -before {input.PRE_TABLE} \
            -after {input.POST_TABLE} \
            -plots {output}
        """

rule bqsr_r1_analyze_covariates_all:
    input:
        PRE_TABLES = expand(BQSR_R1_DIR + "{sample}_PRErecal_r1.table", sample=SAMPLES),
        POST_TABLES = expand(BQSR_R1_DIR + "{sample}_POSTrecal_r1.table", sample=SAMPLES)
    output:
        protected(BQSR_DIR + "all_recalibration_plot_r1.pdf")
    threads:
        1
    log:
        LOG_DIR + "bqsr_r1_build_cohort_vcf.log"
    params:
        PRE_LIST = temp(BQSR_R1_DIR + "pre.list"),
        POST_LIST = temp(BQSR_R1_DIR + "post.list"),
        PRE_TABLE = temp(BQSR_R1_DIR + "pre.table"),
        POST_TABLE = temp(BQSR_R1_DIR + "pre.table")
    shell:
        """
        ls {input.PRE_TABLES} >{params.PRE_LIST}
        ls {input.POST_TABLES} >{params.POST_LIST} 

        singularity exec snpCalling_v0.0.8.img \
            gatk GatherBQSRReports \
                --input {params.PRE_LIST} \
                --output {params.PRE_TABLE}

        singularity exec snpCalling_v0.0.8.img \
            gatk GatherBQSRReports \
                --input {params.POST_LIST}  \
                --output {params.POST_TABLE}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk AnalyzeCovariates \
                -before {params.PRE_TABLE} \
                -after {params.POST_TABLE} \
                -plots {output}
        """

################################################################################
#-------------------------------------------------------------------------------
# BQR_ROUND 2
rule bqsr_r2_haplotype_caller:
    input: 
        GENOME_DIR + "schHae_v1.dict",
        BAM = BQSR_R1_DIR + "{sample}_recal_r1.bam",
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        LIST = BQSR_DIR + "contigs.{chunk}.list"
    output:
        temp(BQSR_R2_DIR + "{sample}_n{chunk}.g.vcf")
    threads:
        1
    log:
        LOG_DIR + "{sample}_{chunk}.bqsr_r2_haplotype_caller.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk HaplotypeCaller \
                -I {input.BAM} \
                -O {output} \
                -R {input.REFERENCE} \
                -L {input.LIST} \
                -ERC GVCF
        """

rule bqsr_r2_build_indiv_vcfs:
    input: 
        expand(BQSR_R2_DIR + "{{sample}}_n{number}.g.vcf", number=NUMS_2D) 
    output:
        temp(BQSR_R2_DIR + "{sample}.sorted.g.vcf")
    threads:
       1
    log:
        LOG_DIR + "{sample}.bqsr_r2_build_indiv_vcfs.log"
    params:
        LIST = temp(BQSR_R2_DIR + "{wildcards.sample}.list"),
        TMP_VCF = temp(BQSR_R2_DIR + "tmp_{wildcards.sample}.merged.g.vcf")
    shell:
        """
        ls {input} >{params.LIST}
    
        singularity exec snpCalling_v0.0.8.img \
           gatk MergeVcfs \
                -I {params.LIST} \
                -O {params.TMP_VCF}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk SortVcf \
                -I {params.TMP_VCF} \
                -O {output}

        """
#-------------------------------------------------------------------------------

rule bqsr_r2_prep_gdbimport:
    input:
        expand(BQSR_R2_DIR + "{sample}.sorted.g.vcf", sample=SAMPLES)
    output:
        temp(BQSR_R2_DIR + "bqsr_r2_hc_samples.list")
    threads:
        1
    log:
       LOG_DIR + "bqsr_r2_prep_gdbimport.log"
    shell:
        """
        ls {input} >{output}
        mkdir results/03-gatk_bqsr/r2/db
        """

rule bqsr_r2_gdbimport:
    input:
        BQSR_R2_DIR + "bqsr_r2_hc_samples.list",
    output:
        temp(BQSR_R2_DIR + "db/{contig}")
    threads:
        12
    log:
        LOG_DIR + "{wildcards.CONTIG}.bqsr_r2_gdbimport.log"
    #params:
    #    CONTIG=config["contigs"]
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk --java-options \"-Xmx4g -Xms4g\" GenomicsDBImport \
                -V {input} \
                --genomicsdb-workspace-path {output} \
                -L {wildcards.contig} \
                --reader-threads {threads} \
                --batch-size 24"
        """
  
rule bqsr_r2_genotype:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        DB = BQSR_R2_DIR + "db/{contig}"     
    output:
        temp(BQSR_R2_DIR + "geno/{contig}.vcf")
    threads:
        1
    log:
        LOG_DIR + "{wildcards.contig}.bqsr_r2_genotype.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk GenotypeGVCFs \
                -R {input.REFERENCE} \
                -V gendb://{input.DB} \
                -new-qual \
                -O {output}
        """

rule bqsr_r2_build_cohort_vcf:
    input:
        VCF = expand(BQSR_R2_DIR + "geno/{contig}.vcf", contig=config['contigs']),
    output:
        temp(BQSR_R2_DIR + "cohort.vcf")
    threads:
        12
    log:
        LOG_DIR + "bqsr_r2_build_cohort_vcf.log"
    params:
        LIST = temp(BQSR_R2_DIR + "geno/contig.list"),
        TMP_VCF = temp(BQSR_R2_DIR + "all.merged.g.vcf")
    shell:
        """        
        ls {input} >{params.LIST}
    
        singularity exec snpCalling_v0.0.8.img \
           gatk MergeVcfs \
                -I {params.LIST} \
                -O {params.TMP_VCF}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk SortVcf \
                -I {params.TMP_VCF} \
                -O {output}
        """
      
# SELECT and FILTER SNPS ------------------------------------------------------------------
rule bqsr_r2_filter_snps:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        VCF = BQSR_R2_DIR + "cohort.vcf"
    output:
        temp(BQSR_R2_DIR + "cohort_filtered_SNPs.vcf")
    threads:
        1
    log:
        LOG_DIR + "bqsr_r2_filter_snps.log"
    params:
        TMP_VCF=temp(BQSR_R2_DIR + "cohort_SNPs.vcf")
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
            -V {input.VCF} \
            -select-type SNP \
            -O {params.TMP_VCF} \
            -R {input.REFERENCE}"

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
            -R {input.REFERENCE} \
            -V {params.TMP_VCF} \
            --filter-expression "'"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"'" \
            --filter-name "'"recommended_snp_filter"'" \
            -O {output}"

        """

# SELECT and FILTER INDELS -----------------------------------------------------
rule bqsr_r2_filter_indels:
    input:
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        VCF=BQSR_R2_DIR + "cohort.vcf"
    output:
        temp(BQSR_R2_DIR + "cohort_filtered_INDELs.vcf")
    threads:
        1
    log:
        LOG_DIR + "bqsr_r2_filter_indels.log"
    params:
        TMP_VCF = temp(BQSR_R2_DIR + "cohort_INDELs.vcf")
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
            -V {input.VCF} \
            -select-type INDEL \
            -O {params.TMP_VCF} \
            -R {input.REFERENCE}"

        singularity exec snpCalling_v0.0.8.img \
            gatk VariantFiltration \
            -R {input.REFERENCE} \
            -V {params.TMP_VCF} \
            --filter-expression "'"QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0"'" \
            --filter-name "'"recommended_indel_filter"'" \
            -O {output}
        """

rule bqsr_r2_merge_variants:
    input:
        INDELS = BQSR_R2_DIR + "cohort_filtered_INDELs.vcf",
        SNPS = BQSR_R2_DIR + "cohort_filtered_SNPs.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa"
    output:
        protected(BQSR_R2_DIR + "cohort_filtered_variants_r2.vcf")
    threads:
        12
    log:
        LOG_DIR + "bqsr_r2_merge_variants.log"
    params:
        LIST=temp(BQSR_R2_DIR + "variant.list")
    shell:
        """
        ls {input.SNPS} {input.INDELS} >{params.LIST}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk MergeVcfs \
            -I {params.LIST} \
            -O {output} \
            -R {input.REFERENCE}
        """
    
#-------------------------------------------------------------------------------
rule bqsr_r2_score_pre_recal:
    input:
        BAM = BQSR_R1_DIR + "{sample}_recal_r1.bam",
        VCF = BQSR_R2_DIR + "cohort_filtered_variants_r2.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa"        
    output:
        BQSR_R2_DIR + "{sample}_PRErecal_r2.table"

    threads:
        1
    log:
        LOG_DIR + "{sample}bqsr_r2_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --known-sites {input.VCF} \
            -O {output}
        """

rule bqsr_r2_recalibrate_bams:
    input:
        BAM = BQSR_R1_DIR + "{sample}_recal_r1.bam",
        VCF = BQSR_R2_DIR + "cohort_filtered_variants_r2.vcf",
        REFERENCE = GENOME_DIR + "schHae_v1.fa",
        PRE_TABLE = BQSR_R2_DIR + "{sample}_PRErecal_r2.table"       
    output:
        BQSR_R2_DIR + "{sample}_recal_r2.bam"
    threads:
        1
    log:
        LOG_DIR + "{sample}bqsr_r2_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --bqsr-recal-file {input.VCF} \
            -O {output}
        """

rule bqsr_r2_score_post_recal:
    input:
        BAM = BQSR_R2_DIR + "{sample}_recal_r2.bam",
        VCF = BQSR_R2_DIR + "cohort_filtered_variants_r2.vcf",
        REFERENCE = GENOME        
    output:
        BQSR_R2_DIR + "{sample}_POSTrecal_r2.table"
    threads:
        1
    log:
        LOG_DIR + "{sample}bqsr_r2_score_pre_recal.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk BaseRecalibrator \
            -R {input.REFERENCE} \
            -I {input.BAM} \
            --known-sites {input.VCF} \
            -O {output}
        """

rule bqsr_r2_analyze_covariates_by_sample:
    input:
        PRE_TABLE = BQSR_R2_DIR + "{sample}_PRErecal_r2.table",       
        POST_TABLE = BQSR_R2_DIR + "{sample}_POSTrecal_r2.table"
    output:
        BQSR_R2_DIR + "{sample}_recalibration_plot_r2.pdf"
    threads:
        1
    log:
        LOG_DIR + "bqsr_r2_build_cohort_vcf.log"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk AnalyzeCovariates \
            -before {input.PRE_TABLE} \
            -after {input.POST_TABLE} \
            -plots {output}
        """

rule bqsr_r2_analyze_covariates_all:
    input:
        PRE_TABLES = expand(BQSR_R2_DIR + "{sample}_PRErecal_r2.table", sample=SAMPLES),
        POST_TABLES = expand(BQSR_R2_DIR + "{sample}_POSTrecal_r2.table", sample=SAMPLES)
    output:
        BQSR_DIR + "all_recalibration_plot_r2.pdf"
    threads:
        1
    log:
        LOG_DIR + "bqsr_r2_build_cohort_vcf.log"
    params:
        PRE_LIST = temp(BQSR_R2_DIR + "pre.list"),
        POST_LIST = temp(BQSR_R2_DIR + "post.list"),
        PRE_TABLE = temp(BQSR_R2_DIR + "pre.table"),
        POST_TABLE = temp(BQSR_R2_DIR + "pre.table")
    shell:
        """
        ls {input.PRE_TABLES} >{params.PRE_LIST}
        ls {input.POST_TABLES} >{params.POST_LIST} 

        singularity exec snpCalling_v0.0.8.img \
            gatk GatherBQSRReports \
                --input {params.PRE_LIST} \
                --output {params.PRE_TABLE}

        singularity exec snpCalling_v0.0.8.img \
            gatk GatherBQSRReports \
                --input {params.POST_LIST}  \
                --output {params.POST_TABLE}
        
        singularity exec snpCalling_v0.0.8.img \
            gatk AnalyzeCovariates \
                -before {params.PRE_TABLE} \
                -after {params.POST_TABLE} \
                -plots {output}
        """


#-------------------------------------------------------------------------------
rule whole_genome_alignment:
    input: 
        HAE_GENOME = GENOME_DIR + "schHae_v1.fa",
        MAN_GENOME = GENOME_DIR + "schMan_v7.fa"
    output:
        HAL = WGA_DIR + "schMan7_vs_schMan1.hal"
    threads:
        12
    log:
        LOG_DIR + "whole_genome_alignment.log"
    params:
        OUT_DIR = WGA_DIR + "cactus",
        SEQ_FILE = WGA_DIR + "seqFile"
    shell:
        """
        echo -e "*schMan_v7 {input.MAN_GENOME}\nschHae_v1 {input.HAE_GENOME}" >{params.SEQ_FILE}

        singularity exec snpCalling_v0.0.8.img \       
            /usr/software/progressiveCactus/bin/runProgressiveCactus.sh \
                --maxThreads {threads} \
                results/05-wga/seqFile \
                {params.OUT_DIR} \
                {output.HAL}
        """


