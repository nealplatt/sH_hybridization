# File:     04-pop_stats.snake
# Name:     Neal Platt
# Date:     13 April 2018
# Desc:     This Snake file is used to generate sH vcfs with sM coordinates and
#           calculate basic popgen stats including struture plots, pca, fst,etc.

# Reccomended
# Usage:    snakemake \
#               --printshellcmds \
#               --use-conda \
#               --cluster 'qsub -V -cwd -S /bin/bash -pe mpi {threads} -o {log}.log -e {log}.stderr' \
#               --jobs 100 \
#               --latency-wait 200 \
#               --snake \
#               --keep-going
#               --restart-times 2

# Reqs:     All required software should be installed/available through the 
#           singularity image, packaged conda env, or in the scripts dir.

# Comments: This portion of the workflow exectures after refining the genotypes

#-------------------------------------------------------------------------------
# To Do:
#   3] update comments
#   4] add cleanup on success
#   5] would prefer to run structure rather than admixture.
#   6] Add R code for building plots
#   7] mitochondrial PCA
#-------------------------------------------------------------------------------

#setting up snakemake 
configfile: "config.yaml"
HOME_DIR = "/master/nplatt/schisto_hybridization/"
CONTIG_CHUNKS=50
ASSEMBLY = "schHae_v1.fa"

#setting work directory
RESULTS_DIR = HOME_DIR + "results/"
SCRIPTS_DIR = HOME_DIR + "scripts/"
DATA_DIR = HOME_DIR + "data/"
LOG_DIR = RESULTS_DIR + "logs/"
GENOME_DIR = DATA_DIR + "genome/"
GENOME = GENOME_DIR + ASSEMBLY
SEQ_DIR = DATA_DIR + "sequence_data/"
FILTER_READS_DIR = RESULTS_DIR + "01-filtered_reads/"
MAP_DIR = RESULTS_DIR + "02-mapped_reads/" 

GATK_DIR = RESULTS_DIR + "03-gatk/" 
BQSR_R1_DIR = GATK_DIR + "r1/"
R1_HC = BQSR_R1_DIR + "hc/"
R1_DB = BQSR_R1_DIR + "db/"
R1_GENO = BQSR_R1_DIR + "geno/"
R1_MERGE = BQSR_R1_DIR + "merge/"
R1_FILTER = BQSR_R1_DIR + "filter/"
R1_BAM = BQSR_R1_DIR + "bams/"
R1_TABLE = BQSR_R1_DIR + "tables/"

BQSR_R2_DIR = GATK_DIR + "r2/"
R2_HC = BQSR_R2_DIR + "hc/"
R2_DB = BQSR_R2_DIR + "db/"
R2_GENO = BQSR_R2_DIR + "geno/"
R2_MERGE = BQSR_R2_DIR + "merge/"
R2_FILTER = BQSR_R2_DIR + "filter/"
R2_BAM = BQSR_R2_DIR + "bams/"
R2_TABLE = BQSR_R2_DIR + "tables/"

GENO_DIR = GATK_DIR + "filter_geno/"
 
POPSTATS_DIR = GATK_DIR + "04-popstats/"

WGA_DIR = RESULTS_DIR + "06-wga/" 

#setting work directory
workdir: HOME_DIR

#setting up local rules to be run on the head node
localrules: all


shell.prefix("source ~/.bash_profile; ")

#onsuccess:
#    shell("rm -r " + R2_HC)

#-------------------------------------------------------------------------------
# initializing rule - these files need to be generated...initiates the pipeline
rule all:
    input:
        expand(POPSTATS_DIR + "sH_filtered_{chr_type}-variants_sManLift.vcf", chr_type=["auto", "sex", "mito", "all"])

#-------------------------------------------------------------------------------
#sequence dictionary
rule index_sman_genome:
    input: 
        GENOME_DIR + "Smansoni_v7.fa"
    output:
        GENOME_DIR + "Smansoni_v7.dict",
        GENOME_DIR + "Smansoni_v7.fa.fai"
    threads:
        1
    log:
        LOG_DIR + "index_sman_genome"
    shell:
        """
        singularity exec snpCalling_v0.0.8.img \
            gatk CreateSequenceDictionary -R {input}

        samtools faidx {input}
        """

rule lift_over_coords:
    input:
        #VCF = GENO_DIR + "sH_filtered_{chr_type}-variants.vcf",
        #LIFTOVER_BED =GENO_DIR + "sH_vs_sM7_liftover.bed"  
        VCF = POPSTATS_DIR + "sH_filtered_{chr_type}-variants.vcf",
        LIFTOVER_BED = POPSTATS_DIR + "sH_vs_sM7_liftover.bed"
        SMAN_REFERENCE = sman  
    output:
        LIFTOVER_VCF = temp(POPSTATS_DIR + "sH_filtered_{chr_type}-variants_lift.vcf"),    
        MINUS_HEADER_VCF = temp(POPSTATS_DIR + "sH_filtered_{chr_type}-variants_header.vcf"),
        UNSORTED_VCF = temp(POPSTATS_DIR + "sH_filtered_{chr_type}-variants_header_unsorted.vcf"),    
        FINAL_VCF = POPSTATS_DIR + "sH_filtered_{chr_type}-variants_sManLift.vcf"      
    threads:
        1
    log:
        LOG_DIR + "lift_over_coords"
    conda:
        "environment.yaml"
    shell:
        """
        python {SCRIPTS_DIR}lift_over_vcf.py \
            {input.LIFTOVER_BED} \
            {input.VCF} \
            {output.LIFTOVER_VCF}

        grep -v "##contig" {output.LIFTOVER_VCF} >{output.MINUS_HEADER_VCF}

        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
                -V {output.MINUS_HEADER_VCF} \
                -R {input.REFERENCE} \
                -O {input.UNSORTED_VCF}

        singularity exec snpCalling_v0.0.8.img \
            gatk SortVcf \
                -I {input.UNSORTED_VCF} \
                -O {output.FINAL_VCF}
        """

rule create_sample_lists_by_locale:
    input: 
        POPSTATS_DIR + "sH_filtered_all-variants_sManLift.vcf"
    output:
        NE_LIST = POPSTATS_DIR + "sample_lists/NE.list",
        TZ_LIST = POPSTATS_DIR + "sample_lists/TZ.list",
        TZ_UNG_LIST = POPSTATS_DIR + "sample_lists/TZ_UNG.list",
        TZ_PEM_LIST = POPSTATS_DIR + "sample_lists/TZ_PEM.list"
    threads:
        1
    log:
        LOG_DIR + "create_sample_lists_by_locale"
    conda:
        "environment.yaml"
    shell:
        """
        mkdir {POPSTATS_DIR}sample_lists/

        bcftools query -l {input} | sort | uniq | grep "Sh.NE" >{output.NE_LIST}
        bcftools query -l {input} | sort | uniq | grep "Sh.TZ" >{output.TZ_LIST}
        bcftools query -l {input} | sort | uniq | grep "Sh.TZ_UNG" >{output.TZ_UNG_LIST}
        bcftools query -l {input} | sort | uniq | grep "Sh.TZ_PEM" >{output.TZ_PEM_LIST}
        """

rule Fst_all:
    input: 
        VCF = POPSTATS_DIR + "sH_filtered_all-variants_sManLift.vcf",
        NE_LIST = POPSTATS_DIR + "sample_lists/NE.list",
        TZ_LIST = POPSTATS_DIR + "sample_lists/TZ.list"
    output:
        WINDOW = POPSTATS_DIR + "{params.WINDOW_PREFIX}.weir.fst",
        BY_SITE = POPSTATS_DIR + "NE_vs_TZ_all.weir.fst",
        ONLY_NUM_CHR_FST = POPSTATS_DIR + "NE_vs_TZ_all_1-7_W.weir.fst"
    threads:
        1
    log:
        LOG_DIR + "Fst_all"
    params:
        WINDOW = 100000,
        STEP = 25000,
        WINDOW_PREFIX = POPSTATS_DIR + "NE_vs_TZ_all_{params.WINDOW}s{params.STEP}",
        SITE_PREFIX = POPSTATS_DIR + "NE_vs_TZ_all"
    conda:
        "environment.yaml"
    shell:
        """
        vcftools \
            --vcf {input.VCF} \
            --weir-fst-pop {input.NE_LIST} \
            --weir-fst-pop {input.TZ_LIST} \
            --out {params.WINDOW_PREFIX} \
            --fst-window-size {params.WINDOW} \
            --fst-window-step {params.STEP}

        vcftools \
            --vcf {input.VCF} \
            --weir-fst-pop {input.NE_LIST} \
            --weir-fst-pop {input.TZ_LIST} \
            --out {params.SITE_PREFIX}

        grep -v \
            -e "H" \
            -e "U" \
            -e "MITO" \
            -e  "1002" \
            -e "3002" \
            -e "W0" \
            {output.WINDOW}  \
                | sed 's/SM_V7_//' \
                    | sed 's/ZW/8/' \
                        >{output.ONLY_NUM_CHR_FST}                                        
        """


#Rcode:
#input         VCF = POPSTATS_DIR + "NE_vs_TZ_all_1-7_W.weir.fst"
#fst<-read.table(file="NE_vs_TZ_mainChr.weir.fst", header=FALSE)
#names(fst)<-c("CHROM", "POS", "FST")
#fstsubset<-fst[complete.cases(fst),]
#SNP<-c(1:(nrow(fstsubset)))
#mydf<-data.frame(SNP,fstsubset)
#manhattan(mydf, chr="CHROM", bp="POS", p="FST", 
#          snp="SNP", logp=FALSE, ylab="WC Fst")


rule admixture_all:
    input: 
        VCF = POPSTATS_DIR + "sH_filtered_all-variants_sManLift.vcf"      
    output:
        TO_PRUNE = POPSTATS_DIR + "{params.PRUNE_PREFIX}.prune.out",
        LD_PRUNED_VCF = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned.vcf",
        PLINK_PED = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned.ped",
        expand(POPSTATS_DIR + "{params.PLINK_PREFIX}.{k}.{ext}", k=seq(1 12), ext=["Q", "P"]),
        expand(POPSTATS_DIR + "{k}.log", k=seq(1 12))
    threads:
        12
    log:
        LOG_DIR + "admixture_all"
    params:
        WINDOW = 25,
        STEP = 5,
        LD = 0.2,
        PRUNE_PREFIX = POPSTATS_DIR + "sH_filtered_all-variants_sManLift",
        PLINK_PREFIX = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned",
        ADMIXTURE_CV = 100
    conda:
        "environment.yaml"
    shell:
        """
        plink \
            --vcf {input.VCF} \
            --allow-extra-chr \
            --indep-pairwise {params.WINDOW} {params.STEP} {params.LD} \
            --out {params.PRUNE_PREFIX}

        singularity exec snpCalling_v0.0.8.img \
            gatk SelectVariants \
                --exclude-ids {output.TO_PRUNE} \
                -O {output.LD_PRUNED_VCF} \
                -V {input.VCF} 

        #convert to ped
        plink \
            --vcf {output.LD_PRUNED_VCF} \
            --out {params.PLINK_PREFIX} \
            --recode12 \
            --allow-extra-chr

        for K in {{1..12}}; do
            {SCRIPTS_DIR}admixture_linux-1.3.0/admixture --cv={params.ADMIXTURE_CV} {output.PLINK_PED} $K >$K.log &
        done                                        
        """

rule mds_autosomes:
    input: 
        VCF = POPSTATS_DIR + "sH_filtered_auto-variants_sManLift.vcf"      
    output:
        PLINK_PED = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned.ped",
        PLINK_GENOME = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned.ped",
        MDS = POPSTATS_DIR + 
    threads:
        12
    log:
        LOG_DIR + "mds_autosomes"
    params:
        PLINK_PREFIX = POPSTATS_DIR + "sH_filtered_all-variants_sManLift_LDpruned",
        ADMIXTURE_CV = 100
    conda:
        "environment.yaml"
    shell:
        """
        plink \
            --vcf {input.VCF} \
            --recode \
            --allow-extra-chr \
            --genome \
            --allow-no-sex \
            --out {params.PLINK_PREFIX}

        plink \
            --file {params.PLINK_PREFIX} \
            --read-genome {output.PLINK_GENOME} \
            --cluster \
            --mds-plot 2 \
            --allow-extra-chr \
            --out {params.PLINK_PREFIX}
        """
#R code
#d <- read.table("plink.mds", h=T)
#
#d$specLoc = factor(c(rep("NE.Dai", 13),
#                 rep("NE.Doki", 1),
#                 rep("NE.Kar", 8),
#                 rep("NE.Lata", 6),
#                 rep("NE.LibTB", 5),
#                 rep("NE.NG", 4),
#                 rep("NE.Seb", 3),
#                 rep("NE.Tiag", 1),
#                 rep("NE.YK", 4),
#                 rep("NE.Youri", 2),
#                 rep("Tz.PEM", 25),
#                 rep("Tz.UNG", 19)))
#
#d$pop = factor(c(rep("NE", 47),
#                 rep("TZ", 44)))
#
#
#plot(d$C1, d$C2, col=c(rep("deeppink", 47), rep("blue", 44)), pch=19, xlab="PC 1", ylab="PC 2", main = "MDS of Sh (gatk/plink)")
#
##legend(x=0.1, y=0.3, c("NE.Dai", "NE.Doki", "NE.Kar", "NE.Lata", "NE.LibTB", "NE.NG", "NE.Seb", "NE.Tiag", "NE.Yk", "NE.Youri", "TZ.PEM", "TZ.UNG"), pch=19, col=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
#
#legend(0.03, 0.025,
#       c("Niger", "Tanzania"),
#       col = c("deeppink", "blue"),
#       cex = 0.8,
#       lwd = 1, lty = 1)






